#!/bin/bash
# Copyright Matthew Bruenig <matthewbruenig@gmail.com> (packer)
#           Moritz LÃ¼decke <ritze@skweez.net>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

usage() {
	echo 'usage: pbar [OPTION] [-t DEVICE] DONE TOTAL [TITLE] [DETAILS]...'
	echo
	echo '  -i    infinite progressbar'
	echo '  -n    outputs a new line at the end'
	echo '  -t    set the tty device'
	echo '  -h    display this help and exit'
	exit
}

screenwidth() {
	tty=$1
	width="$(stty -F $tty size)"
	echo "${width##* }"
}

info() {
	width=$1
	title=$2
	misc=$3
	
	# Get vars for output
	beginline=$title
	misclen=0
	[[ $misc != "" ]] && misclen=$((1+${#misc}))
	if [[ $width -lt $((${#beginline}+2+$misclen-1)) ]]; then
		beginline=${beginline::$((width-$misclen-4))}
		beginline=$beginline"..."
	fi
	spaces="$(($width-${#beginline}-1-$misclen))"

	# Print output
	printf "$beginline %${spaces}s"
	[[ $misc != "" ]] && printf " $misc"
}

drawsymbol() {
	symbol=$1
	num=$2

	for ((n=0; n<$num; n++)); do
		printf "$symbol"
	done
}

# This method is a fork from the packer method aurbar
progbar() {
	width=$1
	infinite=$2
	done=$3
	total=$4

	# Get vars for output
	beginbar="["
	endbar="]"
	perc="$(($done*100/$total))"
	barchars="$(($width-${#beginbar}-${#endbar}-6))"
	hashes="$(($barchars*$perc/100))"
	dashes="$(($barchars-$hashes))"

	# Print output
	printf " ${beginbar}"

	if [[ $infinite ]]; then
		offset="$(($hashes-2))"
		hashes=3
		[[ $offset -lt 0 ]] && offset=0 && hashes=2
		drawsymbol "-" $offset

		offset="$(($offset+$hashes))"
		[[ $offset -gt $barchars ]] && hashes=2
		drawsymbol "#" $hashes

		dashes="$(($barchars-$offset))"
		drawsymbol "-" $dashes
		printf "%s\r" ${endbar}
	else
		drawsymbol "#" $hashes
		drawsymbol "-" $dashes
		printf "%s%4s%%\r" ${endbar} ${perc}
	fi
}

printline() {
	tty=$1
	infinite=$2
	done=$3
	total=$4
	title=$5
	misc=$6

	width=$(screenwidth $tty)
	infolen="$(($width*6/10))"
	[ $width -lt 50 ] && width=50
	progbarlen="$(($width-$infolen))"
	
	# Delete line
	printf "\033[0G"

	info $infolen "$title" "$misc"
	progbar $progbarlen "$infinite" $done $total
}

# Argument parsing

[[ $1 ]] || usage

while getopts ":int:" optname; do
	case "$optname" in
		"i")
			infinite=1
			;;
		"n")
			newline=1
			;;
		"t")
			tty=$OPTARG
			;;
		"?")
			echo "Unknown option $OPTARG"
			usage
			;;
		":")
			echo "No argument value for option $OPTARG"
			;;
		*)
			echo "Unknown error while processing options"
			;;
		esac
done

done=${@:$OPTIND:1}
total=${@:$OPTIND+1:1}
title="${@:$OPTIND+2:1}"
misc=${@:$OPTIND+3}

int='^[0-9]+$'

if [[ $tty == "" ]]; then
	tty=$(tty)
	if [[ $? -ne 0 ]]; then
		echo "Can't get tty device!"
		usage
	fi
fi

if [[ $done -eq "" ]] || [[ $total -eq "" ]] ||
	! [[ $done =~ $int ]] || ! [[ $total =~ $int ]]; then
	usage
fi

if [[ $done -gt $total ]]; then
	done=$total
fi

printline $tty "$infinite" $done $total "$title" "$misc"

[ $newline ] && echo

exit
